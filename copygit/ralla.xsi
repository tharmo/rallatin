class name=riimit
             
 wikspar 
   #xse:shellexec: LC_ALL=C ; sort -V wiki.valids >wiki.srt
   pre
      xse:shellexec: ./rallatin wikspar
 awkspar
   xse:gawk in="wiki.srt" : '''
    BEGIN { }
   
   '''    
 wiktest
    xse:shellexec: LC_ALL=C ;   gawk '  
     . /title/ {   title=substr($0,index($0,"title")+6);
     .  title=substr(title,1,index(title,"/title>")-2);
     . }
     . /{ { fi/ { print title, $0 >  "turha"
     . }'  wiki.txt
   
 wik
    xmp
     ###xse:shellexec: LC_ALL=C ;
       #. cat fiwiktionary-latest-pages-meta-current.xml |   .  iconv -t ISO-8859-1//TRANSLIT -f UTF-8 > "wiki.txt"
       . gawk  'BEGIN { sep="]]";FS=sep;OFS=","}
       . # function alaots(st) { if (index("} 
       . #NR<1000 { next}
       . #NR>10000 { exit}
       . /<comment/ { next}
       . /\|2\|/{ print title,NR,$0 "!" >"wiki.kaks" }
       . /\<title/ { 
         .   if (!skipw && tothit+1>0) {
         .     if (kathit>0) s=s ";" sk;
         .     tothit=tothit+kathit;
         .     #if (index(title,":")==0 && tothit>0)
         .     print "*" title  s >"wiki.vali"; 
         .     print "[" title "]  :::"  sk >"kategs/_" kate;
         .   }   
         .  kate="yleis";kate2=kate;on=0; 
         .  s="";sk="";tothit=0;kathit=0;
         .  title=substr($0,index($0,"title>")+6);
         .  title=substr(title,1,index(title,"/title>")-2);
         .  skipw=length(title)<3
         .  if (index(title,"?")>0) skipw=1
         .  if (index(title," ")>0) skipw=1
         .  if (length(title)>15) on=0;
         .  if (index(title,":")>1) { on=0;skipw=1}; #else { on=1 };next
       . } 
       . skipw { next}
       . /==/ { 
         .    print "[" title "]  :" sk >"kategs/_"kate;
         .    print "[" title "]  :" sk >"kategs/titles";
         .  if (kathit>0) s=s sk # s=s "\n       ," kate sk;#else s=s "#" kathit
         .  sk=""
         .  kate=tolower($0);kate=substr(kate,index(kate,"==")+1);gsub(/[ \t\=öäå<>\/]/, "", kate);
         .  if (index($0,"===")==0) kate2=kate; # vain kaksi =  
         .  tothit=tothit+kathit;kathit=0;sk=""
         .  on=1
         .  if (kate2!="suomi") on=0
         .  if (kate=="etymologia" ||kate2=="yleis" || kate=="yhdyssanat" || kate=="knnkset" || length(kate)>25) { on=0; }
         . #if (title=="varis") print title,"/",kate2,"/",kate,":",$0 >"varis"; else { skipw=1;on=0}
       . }
       . # { if (title=="varis") { print title,"/",kate2,"/",kate,":",$0 } else next } 
       . /johdokset/ { 
          . jo=substr($0,index($0,"{ { joh")+15);
          . jo=substr(jo,1,index(jo,"}}")-1)
          . split(jo,jos,"\|"); for (i=2;i<length(jos)+1;i++) { kathit++;sk=sk ";" jos[i] }
       . }
       .  on==0 { next}
       . /\[\[/ { #print skipw,on, $0;next
       .    for (i=1;i<NF;i++) {
       .      if (index($i,":")<1) { kathit++;sk=sk ";" substr($i,index($i,"[")+2);
       .  #if (substr($i,index($i,"[")+2)=="") s=s "!" $0;
       .   }
       . #print sk
       .    }  
      
       . } ' wiki.txt 
       # >testi 
     xse:shellexec: LC_ALL=C ; gawk ' 
        . BEGIN { print "alkaa";FS=";";while (getline<"kaavoitetut") { i++;nums[$1]=i; }}
        . { $1=substr($1,2) ; 
        .  if (nums[$1]==0) { print "!" $1 ":" $0 >"turha";next}
        .  resu="";n=0; 
        .   for (i=2;i<=NF;i++) { 
        .     if (index($i,"\|")>0) $i=substr($i,1,index($i,"|")-1);
        .     #if (nums[$i]==0) continue; else { n++;resu=resu $i ",";print  $i,$1 > "wikirev.tmp"} 
        .     if (nums[$i]==0) continue; else { n++;resu=resu $i ",";print  $i,$1 "\n" $1,$i > "wikiboth.tmp"} 
        .    }
        .   if ( resu!="")  print $1 ","resu>"wiki.valids"
        .   nn[n]=nn[n]+1 ;
        . #if (n>30) print n, $0,"\n->",resu 
        . }
       . END { print "END:" length(nn) 
       .  for (n=0;n<55;n++) print  n ": " nn[n]

        . }' wiki.vali
     xse:shellexec: LC_ALL=C ; sort wikiboth.tmp -V > wikiboth.tmp2   
     xse:shellexec: LC_ALL=C ; cat wikiboth.tmp2  |gawk '
      . BEGIN  { PROCINFO["sorted_in"]="@val_num_desc" }
      . function line() { a="";
      .    for (i in ppp) a=a " " i " " ppp[i];
      .    return a}
      . {  #if (NR>100) exit;
      . if ($1!=p1) { ppp[p2]=n;print p1,nn line();
      .  p1=$1;delete(ppp);nn=1;n=1;p2=$2;next} 
      . if ($2==p2) { n++;nn++}
      . else { ppp[p2]=n;n=1;p2=$2;nn++ } 
      . # else { pp=pp p2 " " n " ";n=1;p2=$2;nn++ } 
      . } ' | sort -V  >wikiboth.srt
/===Numeraali===
/===Adjektiivi===
/===Adverbi===
/===Pronomini===
/===Substantiivi===  eisaa napa ino
/===Verbi===
/=====Yläkäsitteet=====
/=====Osakäsitteet=====
/=====Rinnakkaiskäsitteet=====
=====Rinnakkaismuodot=====
====Idiomit====
=====Johdokset=====
=====Alakäsitteet=====




  
 # WIKTUINARYSTA POIMITUT LIITTYVYIEN SANOJEN LISTAT SANAPAREIKSI
 # cat ../finnwn/lists/fiwn-semrels-extra.tsv |grep topic |gawk 'BEGIN {FS="\t"}{print gensub(" [|] ",",","g",$5) "        "  gensub(" [|] ",",","g",$2)}' |sort -V |iconv -t ISO-8859-1//TRANSLIT -f UTF-8 >fwn_hypers.lst
 # cat ../finnwn/lists/fiwn-semrels-extra.tsv |gawk 'BEGIN {FS="\t"}{print gensub(" [|] ",",","g",$5) "        "  gensub(" [|] ",",","g",$2)}' |sort -V |iconv -t ISO-8859-1//TRANSLIT -f UTF-8 >fwn_sem.lst 
 suuntiinsa
  xse:shellexec: LC_ALL=fi_FI.ISO-8859-1;cat wpairs.sans fpairs.sans |sort - -k1,1V -k2,2V >wfpairs.tmp
  xse:shellexec: LC_ALL=fi_FI.ISO-8859-1;cat wfpairs.tmp |gawk '{ print $2,$1;print }' |sort - -k1,1V -k2,2V >wfpairs.sans
  pre
     xse:gawk oldin=wfpairs.sans in=pairs1.sans: '''
      BEGIN { while (getline<"kaavoitetut") { i++;nums[$1]=i; } }
        #NR>100 { exit}
        p1!=$1 {  
        print  p1,nn,pp p2,n > "fwa.spar";
        print nums[p1],nn,ppn nums[p2],n > "fwn.spar";
        pp="" ;ppn="";
        p1=$1;nn=0;p2="";n=0
       }
       p2!=$2 { 
        if ($2==p1) { next}
        if (p2!="") {
        pp=pp p2 " " n " ";
        ppn=ppn nums[p2] " " n " ";
        }
        n=0;p2=$2}
       {  n++;nn++} 
       
       '''
 rela
  pre
   xse:shellexec: grep -a {/form/x}  u_allrel.spar;./rallatin relas {/form/x}
   h1: {/form/x} x
   
 comporder
  pre
   #xse:shellexec: LC_ALL=fi_FI.ISO-8859-1;cat wpairs.sans fpairs.sans |sort - -k1,1V -k2,2V
   xse:shellexec: LC_ALL=fi_FI.ISO-8859-1;cat wpairs.sans  |sort - -k1,1V -k2,2V 
    :  | gawk 'p1!=$1 { print p1,nn,pp,p2,n ;pp="";p1=$1;nn=1;p2=$2;n=1;next} p2!=$2 { pp=pp p2 " " n " ";n=0;p2=$2}{  n++;nn++}'  > pairs1.sans
     #xse:shellexec: LC_ALL=fi_FI.ISO-8859-1;cat wpairs.sans fpairs.sans |sort - -k2,2V -k1,1V
  xse:shellexec: LC_ALL=fi_FI.ISO-8859-1;cat wpairs.sans  |sort - -k2,2V -k1,1V
   :  | gawk 'p2!=$2 { print p2,nn,pp,p1,n;p1=$1;n=1;pp="";p2=$2;nn=1;next} p1!=$1 { pp=pp p1 " " n " ";n=0;p1=$1}{ n++;nn++}' > pairs2.sans
  style type=text/css: div { color:green;margin-left:8em}  small { font-size:9px}
  pre
   xse:gawk env="LC_ALL=fi_FI.ISO-8859-1" in=pairs1.sans: '''
      function pr() {  
       
        ss="";for (ii in sans1) 
         if (ii in sans2)
                ss= ss " " ii  "(" sans1[ii] "/" sans2[ii] ") ";
         print "<b>++ " ss "!</b>";
        }
      function pr1x() { s="";for (i in sans1)  s=s i "[" sans1[i] "] ";print "-" s; }
      function pr2x() { s="";for (i in sans2)  s=s " " i "(" sans2[i] ") ";print "<em>--" s "</em>"}
      function pr1() { s="";for (i in sans1) if (!(i in sans2)) s=s i "[" sans1[i] "] ";print "-" s ;}
      function pr2() { s="";for (i in sans2) if (!(i in sans1)) s=s " " i "(" sans2[i] ") ";print "<em>+" s "</em>"; }
      function aline1() { delete(sans1); for (i=3;i<NF;i=i+2) sans1[$(i)]=$(i+1)}
      function aline2() { delete(sans2); for (i=3;i<NF;i=i+2) sans2[$(i)]=$(i+1)}
      function t(w) { print "<b>" w ":</b>"}
      BEGIN { PROCINFO["sorted_in"]="@ind_str_asc"} 
       #NR>5000 { exit}
      { #print "<b>+" $1 "+</b><small> " $0,"</small><b>",py,"</b>";
       px=$1;
       aline1();
       
      } 
       #NR>100 { exit}
      ($1==py) { t(py);pr();pr1();pr2();print "<hr>"; px="";py="";next}
      ($1< py)  { #pienempi kuin toisesata jo luettu, printataan  ja jatketaan
        t(px);pr1x();px="";print "<hr>" ;delete(sans1);next;
       }
      ($1 > py)  {  mentiin yli tokasta jo luetusta
        #print "<div>"
         while (getline<"pairs2.sans") {  
           delete(sans2);
           #print "<b>-" $1 "-</b> <small>:" $0 " </small>"," <b>",NF, px,"</b>" ,"!!!"
           if ($1==px) { # löytyi sama, printataan molemmat ja pannaan toka muistiin
            t(px); delete(sans2);  aline2();pr();pr1();pr2();py="";px="";print "<hr>";delete(sans2);delete(sans1); break;
            }
           if ($1<px) { # edelleen aakkosissa edellä, printataan ja jatketaan kakkostiedostossa
             t($1);py="";aline2();pr2x();delete(sans2);print "<hr>"
           } 
           if ($1>px) { # meni ohi, printataan s1 ja pannaan muistiin kakkonen
             t(px);pr1();aline2();py=$1;print "<hr>";delete(sans1);break;  #hypätään takaisin ykköseen
           } 
         }
          #  print "</div>"
       }
     '''
   #pairs2.sans |sort -V > 
     
 joinfw
  xse:shellexec: LC_ALL=fi_FI.ISO-8859-1;cat wpairs.sans fpairs.sans |sort - -k1,1V -k2,2V >allpairs.sans
  xse:shellexec: LC_ALL=fi_FI.ISO-8859-1;cat allpairs.sans| uniq -c |gawk '{ print $2,$3,$1 >"u_all.sans" }'
  xse:shellexec:  cat u_all.sans |sort -k2 |gawk 'p!=$2 { print p,n;p=$2;n=0} { n=n+$3}'>u_all.counts

  xse:gawk in="u_all.sans": '''
   BEGIN { while (getline<"u_all.counts") { cc[$1]=$2; }}
   $1!=p { 
    print p " " ntot pp>"u_all.spar";
    print p " " nc pc>"u_allrel.spar";pc="";nc=0;pp="";p=$1;ntot=0
    
    }
   {
     if ($2==$1) next
     pp=pp " " $2 " " $3;ntot=ntot+$3 
     c=int(1000*$3/(cc[$2]+1))
     pc=pc " " $2 " " c;nc=nc+c 
     
     }
  '''     
  pre 
   xse:gawk in="u_allrel.spar": '''
      BEGIN { while (getline<"kaavoitetut") { i++;nums[$1]=i; }  ;PROCINFO["sorted_in"]="@val_num_desc"}
   { for (i=3;i<=NF;i=i+2) p[nums[$i]]=$(i+1)
   for (w in p) { pp=pp w " " p[w] " " ;tot=tot+p[w] }
   if ($1=="kuusi") print($1 "(" nums[$1]")\n##" pp "\n",$0)
    print nums[$1],tot,pp>"u_alln.spar";pp="";delete(p);tot=0}
  '''     
   
 hyper
  pre
   . rivi
   . ja toinen
 xx  
   #xse:gawk in=../finnwn/lists/fiwn-semrels-extra.tsv: '''
     #xse:gawk in=fwn_hypers.lst: '''
   xse:gawk in=fwn_sem.lst: '''
     BEGIN { while (getline<"kaavoitetut") sanat[$1]=1;FS="        "}
      #/,henki,/ {print}
     { split($1 "," $2,rr1,","); 
       for (sana in rr1) if (sanat[rr1[sana]]==1) { ahits++;resu=rr1[sana] "," resu;ws[rr1[sana]]=1}
       if (ahits>1 )
          print resu >"turha";
       for (w1 in ws) for (w2 in ws) { if (w1!=w2) print w1,w2 >"turha2"; if (w1=="ionisoitua") print w1,w2, resu};
        resu="";ahits=0
        delete(ws);delete(rr1);delete(rr)
      }
   '''
   xse:shellexec: cat turha2 |grep -v -a hypernym |sort -V |uniq -c | gawk  
     . ' BEGIN { PROCINFO["sorted_in"]="@val_num_desc"}
     .  $2!=p  { for (i in resu) res=res  i "," resu[i] ",";
     .  print p "," n "," res "\n">"turha3";res="";p=$2;n=0;delete(resu)} 
     . {  resu[$3]=resu[$3]+$1;n++;
     .      nn=nn+$1;
     . } '
 syns
   xse:shellexec: cat ../finnwn/lists/fiwn-synsets-extra.tsv   
    : |   gawk '
    . BEGIN { while (getline<"kaavoitetut") { i++;sanat[$1]=i; };FS="\t"} 
    . { res=" ";r=0;split($3,ws,"|"); for (i in ws) { 
    .    s=gensub(" ","","g",ws[i]); if (sanat[s]>0) { r++;res=res s " "} 
    . } 
    . if (r>1) print res >"syns.spar"
    . }
    . '

 sensyn
  pre
    xse:shellexec: cat syns.spar senses.spar |
     . gawk '  
     . {  
     . for (i=1;i<=NF;i++) 
     .   for (j=1;j<NF;j++) 
     .      if (i!=j)   print $i,$j "\n" $j,$i
     . }' |sort -V |uniq -c>"sensyn.parit"
    xse:shellexec: gawk '
       . BEGIN {    while (getline<"kaavoitetut") { 
       . i++;sanat[$1]=i; }; PROCINFO["sorted_in"]="@val_num_desc"}
       . { 
       .  if (p!=$2) { 
       .   pps=p " " n " ";ppn=sanat[p] "," n ;      
       .   for (i in pp) { pps=pps " " i " " pp[i];ppn=ppn "," sanat[i] "," pp[i]}
       .   print pps>"sensyna.spar";print ppn>"sensynn.spar";
       .   delete(pp);p=$2;n=0; 
       .  }
       .  if ($2!=$3) { pp[$3]=$1+pp[$3];n=n+$1; }
       . }' sensyn.parit
 synonly
  pre
    xse:shellexec: cat syns.spar |
     . gawk '  
     . {  
     . for (i=1;i<=NF;i++) 
     .   for (j=1;j<NF;j++) 
     .      if (i!=j)   print $i,$j "\n" $j,$i
     . }' |sort -V |uniq -c>"synonly.parit"
    xse:shellexec: gawk '
       . BEGIN {    while (getline<"kaavoitetut") { 
       . i++;sanat[$1]=i; }; PROCINFO["sorted_in"]="@val_num_desc"}
       . { 
       .  if (p!=$2) { 
       .   pps=p " " n " ";ppn=sanat[p] "," n ;      
       .   for (i in pp) { pps=pps " " i " " pp[i];ppn=ppn "," sanat[i] "," pp[i]}
       .   print pps>"synonlya.spar";print ppn>"synonlyn.spar";
       .   delete(pp);p=$2;n=0; 
       .  }
       .  if ($2!=$3) { pp[$3]=$1+pp[$3];n=n+$1; }
       . }' synonly.parit
    
 senses    
   xse:shellexec:  gawk '{ print $2,$0}' ../finnwn/index.sense |  sort -V|
    . gawk '
    : BEGIN { while (getline<"kaavoitetut") { i++;sanat[$1]=i; }} 
    .
    . p!=$1 { if (snum>0 && oks>1) print ppp>"senses.spar"; 
    . sana=substr($2,1,index($2,"%")-1); 
    . snum=sanat[sana] ;ppp="";oks=0;
    . p=$1; }
    . snum>0 { ps=substr($2,1,index($2,"%")-1);
    .  if (sanat[ps]>0) { oks++;ppp=ppp  ps " "}
    . } ' 
 #  cat  ../finnwn/index.sense |gawk '{print $2,$0}' | sort |gawk 'p==$1 {print pp,"     //",substr($2,1,index($2,"%")-1)}{p=$1;pp=substr($2,1,index($2,"%")-1)}'
 ####cat turha2 |sort -V | uniq -c    
     { #if (p!=$1) {
      ahits=0
        split(p,rr1,","); for (sana in rr1) if (sanat[rr1[sana]]==1) { ahits++;resu=rr1[sana] ":" resu;ws[rr1[sana]]=1}
        if (ahits>0 ) if (hits>0 )
          print resu "\n">"turha";
        for (w1 in ws) for (w2 in ws) { if (w1!=w2) print w1,w2 >"turha2"; if (w1=="ionisoitua") print w1,w2, resu};
        resu="";hits=0
        delete(ws);delete(rr1);delete(rr)
      }
      split($2,rr,",");
      for (sana in rr) if (sanat[rr[sana]]==1) { hits++;resu=resu rr[sana] ",";ws[rr[sana]]=1 }
      resu=resu "|"
      p=$1 
     }
    '''
    #cat turha2  |sort -V |uniq -c >turha3
    #cat ../finnwn/lists/fiwn-semrels-extra.tsv |grep topic |gawk                        'BEGIN {FS="\t"}{print gensub(" [|] ",",","g",$5) "        "  gensub(" [|] ",",","g",$2)}' |sort -V |iconv -t ISO-8859-1//TRANSLIT -f UTF-8 >fwn_hypers.lst   xse:gawk in=wiktfinwn.lsts: '''
 wf
   #xse:shellexex: cat fpairs.uniq2 wpairs.uniq |sort -V| uniq |gawk  '{if ($1!=p1)  { print p1 line;line=""} line=line "," $2;p1=$1}'>wiktfinwn.lsts
        BEGIN {  eka=1;ekaok=1;while (getline<"kaavoitetut") { i++;sanat[$1]=i; };
        FS=","}
        { 
         if (NF<63) next
         for (i=1;i<=NF;i++) { #print $i,sanat[$i]
           if ( sanat[$i]>0)  s=s $i " "; else s=s "XX"
         }
           nn++
           print  s>"wfyleiset.lst";
           s=""
           #if (NR>1000) exit
        } 
        #{if ( && sanat[)
        
    '''

 math
  table border=1
   xse:gawk: '''
    BEGIN { nsa="10,100,1000,100000,1000000,10000000,10000000"
     vsa="1,10,100,1000,10000,100000"
     split(nsa,ns,",")
     split(vsa,vs,",")
     for (v in vs) { 
        print "<h3>" vs[v] "</h3><table border=1><tr><td></td>" 
        for (i in ns)  print "<td><b>" ns[i]"</b></td>"
        print "</tr>"
        for (i in ns) {
           print "<tr><td><b>" ns[i]"</b></td>"
           for (j in ns) {
             vv=int(10*log(10000000*vs[v]*vs[v]/(ns[i]*ns[j]+1000*(ns[i]+ns[j]))))
             if (vv<0) vv=""
             if (ns[i]<vs[v] || ns[j]<vs[v]) vv=""
              print "<td>" vv "</td>"          
           }    
           print "</tr>"
        }
       print "</table>" 
     }  
   } 
      
   ''' 
     
 list
   pre
    xse:shellexec: ./rallatin list
 wikithe  ##muokattu vanhasta jossa kaikki parit laskettiin (nyt vain eka sana muiden kanssa), siksi turhan sejava
      xse:gawk in="../riimitin/wikithe.ansi": '''
      BEGIN {  eka=1;ekaok=1;while (getline<"kaavoitetut") { i++;sanat[$1]=i; }}
      
      /^$/{ 
         if (t>m) m=t;t=0; 
         #print set>"wikisetit.lst";
         if (anum!=0)
          for (i in nums)  { print anum,nums[i] "\n" nums[i],anum>"wpairs.nums"; print asan,sans[i] "\n" >"wpairs.sans"} #sans[i],asan>"wpairs.sans"; }
                  #for (i in nums) for (j in nums) if (i!=j) print nums[i],nums[j]>"wikisetit.nums";
                  #for (i in nums) for (j in nums) if (i!=j) print sans[i],sans[j]>"wikisetit.sans";
         delete(nums);delete(sans);set="";
         eka=1;
         asan="";
         anum=0
         sn=0;next;
        }
      /_/ { gsub("_","",$0) }

      {    
       snum=sanat[$1];      
       if (asan=="vuoro") print "(" $0, asan, NR")";
      
       if (snum>0) {    ####sana esiintyy sanastossa
         set=set $1 " "; 
         sn++
         if (eka==1) { if ($1=="vuoro") print "!" asan,$1, NR;eka=0;asan=$1;anum=snum;next;}
         nums[sn]=snum
         sans[sn]=$1
       }
       else   { #setin eka sana ei kaavoitettu
          if (eka==1) { anum=0;asan="";eka=0 }
         } 
      } 
       
      ''' 
 # FINNWORDNETISTÄ POIMITUT LIITTYVYIEN SANOJEN LISTAT SANAPAREIKSI
 fwnthe
      xse:gawk in="finwnsyno.all": '''
      BEGIN {  eka=1;ekaok=1;while (getline<"kaavoitetut") { i++;sanat[$1]=i; };FS=","}
      {  s1=$2;n1=sanat[s1];
         print s1,NF
         if (n1>0) { 
            for (i=3;i<=NF;i++ ) {
               nii=sanat[$i];
               if (nii>0) { 
                 print s1
                 #print s1,$i "\n" $i,s1 >"fpairs.sans";print n1,nii "\n"  nii,n1 >"fpairs.nums"
                 print s1,$i  >"fpairs.sans";print n1,nii  >"fpairs.nums"
               }  
            }
         }   
           
       }   
     '''
 numertoi   
   xse:shellexec: gakw  '  BEGIN { while (getline<"kaavoitetut") { i++;sanat[$1]=i; }}{ print sanat[$1],sanat[$2],$3}' u_all.setit

 uusiks  //finwn.parit on viimeisin tiedetty kelvollinen. parit sanoina,sorttaamatta
     xse:gawk in=finwn.parit: '''
          BEGIN { while (getline<"kaavoitetut") { i++;nums[$1]=i; } }
          {
           print nums[$1],nums[$2] >"u_fwn.nums"
          }
      '''    
      #  cp wikisetit.nums u_wik.nums .. wiki oli valmiiksi numeropareina
 
      xse:shellexec: cat u_fwn.nums u_wik.nums |sort -k1,1g -k2,2g | uniq -c |gawk '{ print $2,$3,$1}>u_alln.setit


 joinwnwi
     #pre
     xse:gawk in=u_nums.setit: '''
          BEGIN { while (getline<"kaavoitetut") { i++;sanat[i]=$1; } ;PROCINFO["sorted_in"]="@val_num_desc"}
         {  #if (NR>100) exit
               #print $0,"<b>",cc "</b>",sanat[$2] 
               if ($1!=p1) { 
                  s=sanat[p1]; n=p1 
                  coocs[p2]=cc
                  for (i in coocs)  if (sanat[i]=="") print i,"!!!";else { 
                    s=s " "  sanat[i] " " coocs[i]; n=n " "  i " " coocs[i];
                   }
                  if (maksi<length(coocs)) {  maksi=length(coocs);print "<li>\n<li> " maksi,s}  
                  print n >"rela.nums" ;
                  print s "\n">"rela.sans" ;p1=$1;delete(coocs);p2=$2;cc=$3
               } 
               
               if ($2!=p2) {   
               coocs[p2]=cc; 
               #print "      uusi:" sanat[p2] " " $1  
               p2=$2;cc=0
               } 
               cc=$3+cc
               #print "            +" length(coocs)  sanat[$2]
          }     
         #END { for (i in sanat) print i,sanat[i] }
     '''
  #xse:shellexec: cat wikisetit.nums |sort -k1,1g -k2,2g | uniq -c|gawk '$1>1 {print $2,$3,$1}' |sort -V >ww.nums>wiki.nums
 # xse:shellexec: cat finwn.nums |sort -k1,1g -k2,2g >finwn2.nums

  #xse:shellexec: cat wikisetit.nums finwn.nums |sort - -k1,1g -k2,2g >wiwn.nums
  #xse:shellexec: cat finwn.nums wikisetit.sans |sort -c| uniq -c|gawk '$1>1 {print $2,1000-$1,$3}' |sort -V >fwn.nums
  #xse:shellexec: cat finwn.nums wikisetit.sans |sort -c| uniq -c|gawk '$1>1 {print $2,1000-$1,$3}' |sort -V >fwn.nums
   
 czz
  #cat finwn.parit setit.sans |sort -V| uniq -c|gawk '$1>1 {print $2,1000-$1,$3}' |sort -V >wfall.lst
 # wikiparit kumpaankin suuntaan, sorttaamatta, laskematta  wikisetit.sans -sanoina,  wikisetit.nums - numeroina
 #finwn.lst wordnet sanaparit laskettuina(1000-n), sortattuina, kumpaankin suuntaan sanoina
 #wfall.lst ja  finwn.lst joutavat yhteen.. eiks wfall ole jo wiktionary + finwn?
 
 # finwn.nums, wiki.nums, parit numrtoins,  laskettu ja sortattu oikein (?)
 wikilist
      # cat wikisetit.nums  |sort -V| uniq -c|gawk '$1>1 {print $2,1000-$1,$3}' |sort -V >wikisyn.lst
    pre  
      xse:gawk in="wikisyn.lst": ''' 
          BEGIN { PROCINFO["sorted_in"]="@val_num_desc";while (getline<"kaavoitetut") { i++;sanat[i]=$1; } }
          # print sanat[$1],sanat[$3]
         $1!=p1 { print sanat[p1],res >"wikisynsan.lst";res="";p1=$1;next}
         {  res=res " " sanat[$3]} 
      '''    
 #finwnnums     
 finsan     
    xse:gawk in="finwn.all" BEGIN="FS=','": '''
           BEGIN { while (getline<"kaavoitetut") { i++;sanat[i]=$1; } }
              
 finwnsyno    
    xse:gawk in="finwnsyno.all" BEGIN="FS=','": '''
       NF>0 { for (i=2;i<=NF;i++) for (j=2;j<=NF;j++) if (i!=j) print $i,$j >"finwn.parit"}
       #{ print $1,$2;if (NR>999) exit }
    '''   
    xse:shellexec: LC_ALL=fi_FI.ISO-8859-1;cat finwn.parit  |sort -V| uniq -c|gawk '$1>1 {print $2,1000-$1,$3}' |sort -V >finwn.lst
 z
    pre
     xse:gawk in="both2.spar"  : '''
       BEGIN {  PROCINFO["sorted_in"]="@val_str_asc"; while (getline<"both2.counts") { counts[$1]=$3; wrds[$1]=$2 } 
       #for (w in wrds) print w, wrds[w], counts[w]
       FS=","
       }
      {    if (NR>30) exit
       res=wrds[$1] " " counts[$1] ":"
       for (i=2;i<=(NF / 2);i++)  { 
          res=res " " wrds[$(i*2-1)] "," int(1000000*$(i*2)/counts[$1]/counts[$(i*2-1)]) " "
         }
       print res   "\n"
       }
      
     '''  

 zz
   pre
    xse:gawk in="both2.rel"  : '''
    BEGIN {  PROCINFO["sorted_in"]="@val_num_desc"; while (getline<"kaavoitetut") { i++;snums[$1]=i; } 
    while (getline<"both3.counts") { counts[$2]=$3;  } 
       for (w in counts) print w, counts[w]
    }

     {  exit #if (NR>3000) exit; 
       if ($1!=p1) { 
          res=p1 "," kumps[p1] ","
          x=0;tot=0;
          for (i in kumps) if (i!=p1) { res=res i "," kumps[i] ",";
            x++;if (x>63) break;tot=tot+kumps[i];
            }
          print res "\n" >"bothz.spar"
          #for (i in kumps) { res=res i kumps[i] ","}
          p1=$1
          delete(kumps)
         }
         kumps[$2]=counts[$2]
         #kumps[$2]=int($(3)/(counts[$1]+1)/(counts[$3]+1)) 
         #kumps[$2]=int(1000*$(3)/(counts[$3]+1)) 
         #print kumps[$2],$2
       }
    '''
 zzzz
  pre
    xse:gawk in="both2.rel"  : '''
    BEGIN {  PROCINFO["sorted_in"]="@val_num_desc"; q=0 }
    while (getline<"both3.counts") { counts[$2]=$3;  } 

     /^tulla /{
     x++
     if (x>10000) {    for (w in kumps) print w "/" kumps[w]; exit  }
     kumps[$2]=$3 
     q=1
     next
       } 
      q==1 {    for (w in kumps) print w "/" kumps[w]; exit}
 
    '''   
 gutspar
   pre
     #xse:gawk in="guts.rel"  : '''
     #xse:gawk in="guts.rel"  : '''
      
      
    xse:gawk in="both2.rel"  : '''
    BEGIN {  PROCINFO["sorted_in"]="@val_num_desc"; while (getline<"kaavoitetut") { i++;snums[$1]=i; } 
    while (getline<"both3.counts") { counts[$2]=$3;  } 
    }
    function line() {
           resn=snums[p1] "," tot 
           resa=p1 "," tot 
          x=0;
          #for (i in kumps) if (i!=p1) { resa=resa i "," kumps[i] ",";
          #  x++;if (x>63) break;  #if (p1=="tulla") print kumps[i],tot 
          #  }
           if (debug)  print p1 ": " > "aamu"
          for (i in kumps) if (i!=p1) { 
           #if (debug)  print kumps[i],"/" i,int(counts[i]/1000)> "aamu"
           if (x<64) {
            resn=resn "," snums[i] "," kumps[i];
            resa=resa "," i "," kumps[i];
            }
             x++;#if (x>63) break;  #if (p1=="tulla") print kumps[i],tot 
            #print p1                   
            }
          print  resa  "\n"> "botha.spar"
          print resn  >"bothn.spar"
          #print res  >"guts.spar"
          print snums[p1],p1,tot>"both3.counts"
          #for (i in kumps) { res=res i " " kumps[i] " ,"}
          p1=$1
          delete(kumps)
          tot=0;
          cc=counts[$1]+1 
   }

     {   #if (NR>30000) exit; 
       if ($1==$2) next
       if ($1!=p1) {  line()
       }
       tot=tot+$3
       if ($3<2) next
       c=counts[$2]
       #v=int(log(100000*$3*$3/(cc*c)))
       v=int(10*log(100000000*$3/(c*cc+10000*(c+cc))))
             if (v<0) next
             #if ($3<v || $3<vc) next
       #print v
       if (c==0) next
       if ($1=="absurdi") print $1 cc, "/" $2 c,"=" v, "/" pena
       if (pena>0) v=v/pena
       if (v<1) next
         
       if (v>50) print $1,$2 , v >"turha"
       if (v<1) next
       kumps[$2]=int(v) # " "  $3  " " counts[$2] " -" int(pena) " "
        #print kumps[$2],$2

       }
     END {  line()}  
    '''
 testspar
  pre 
    xse:gawk in="both2.rel"  : '''
        BEGIN {  PROCINFO["sorted_in"]="@val_num_desc";  }
     {   
       if ($1!=p1) { 
          res=p1 "," kumps[p1] ","
          x=0;
          for (i in kumps) if (i!=p1) { res=res i "," kumps[i] ",";
            x++;if (x>63) break
            } 
          print res    #"both2.spar"
          p1=$1
          delete(kumps)
         }
         kumps[$2]=$3 
       }
    '''
 
 painota 
  pre
     xse:gawk in="joinrels.lst" env="LC_ALL=fi_FI.ISO-8859-1": '''
      function isoero(a,b) {
       if (  (a+20)/(b+20)>10) print $1,a,b  >"gutmore.lst"
       else if ((b+20)/(a+20)>10) print $1,a,b >"grammore.lst"
       #else print (b+20)/(a+20)
       }
      BEGIN { FS=" "}
      { print $1,$3+$6 >"all.rel";next}
     /\sgu\s.*\sgr$/ { isoero($3,$6); grtot=grtot+$3;gutot=gutot+$6;next}
     #/\sgr.*gu\s/ { print $0 ;isoero($6,$3);next}
     /gr/ { if ($3>10)  print $1,$3,0 >"only.gr";grtot=grtot+$3}
     /gu/ { if ($3>10) print $1,$3,0>"only.gu";gutot=gutot+$3}
     END { print "guts:" gutot "  /grams:" grtot}
     # guts:38.530194  /grams:52.582624
      #NR>100000 { exit}
    '''     
 gutgramjoin
    #xse:shellexec: cat grams.rel guts.rel |sort -V >both.rel
    pre
      xse:gawk in="both.rel" env="LC_ALL=fi_FI.ISO-8859-1": '''
      {
        if ($1!=p1 || $2!=p2) 
         {
            print p1 , p2 , n  >"both2.rel"; 
            n=0;
            p1=$1;
            p2=$2
          } 
          
         n=n+$3
      }  
      '''
   ###xse:gawk in="both.rel" env="LC_ALL=fi_FI.ISO-8859-1": '''
      function isoero(a,b) {
       #if (a<0 || b<0) print "vitut  " $0      else
       if (  (a+20)/ (b+20)>10 || (b+20)/(a+20)>10) print $1,$2, $4, "  " an >"isot.erot"
       }
     { 
     #if (NR>10000) exit 
     if (a1==$1 && a2==$2) { ## sama pari, ynnää, printataan vasta seuraavalla rivillä
       isoero(an,$4) 
        an=an+$4 
      }
      else { # uusi pari,ei vielä tiedetä tuleeko lisää
        print a1,a2,an >"both2.lst"  # printattiin edellinen
         a1=$1;a2=$2;an=$4
       }
       
      }
    '''  

 gutnorm 
     xse:gawk in="gutpairs.lst" : '''
     BEGIN {  while (getline<"guts.cnt") { counts[$1]=$2; tot=tot+$2}; }
     { 
       if (p1!=$1) { if (count1!=nn) print(p1,count1,nn);count1=counts[$1];print $1,$1,count1,count1 >"guts.rel";p1=$1;nn=0 }
        nn=nn+$3
        if ($2==$1) { next }
        expe=0.2+(counts[$1] * counts[$2]) /tot
        if (expe==0) { print $0,counts[$1],counts[$2]>"zero.exp";}
        else f=($3 / expe)
        if (f>1000) f=1000
        if (int(f)>0) print $0,  int(8*f),expe >"guts.rel"
        #print int(expe) "=" tot "/ (" counts 
     }
     END { print tot,toto} #49399104
    '''
 gutcount #jäi laskemata
   xse:gawk in="gutpairs.lst": '''
         { if ($1!=p) { print p,n >"guts.cnt";n=0;p=$1} 
          n=n+$3 } 
          
   '''
 sanaparitnorm   
    ###xse:gawk in="gramkarsi.lst" : '''
       p!=$1 { print p,sum>"grams.cnt";p=$1;sum=0}
       { sum=sum+$3}
     '''
   pre  
    xse:gawk in="gramkarsi.lst" : '''
     BEGIN {  while (getline<"grams.cnt") { tot=tot+$2; counts[$1]=$2; }}
     {
       if (p1!=$1) { if (count1!=nn) print(p1,count1,nn);count1=counts[$1];print $1,$1,count1,count1 >"grams.rel";p1=$1;nn=0 }
        nn=nn+$3
        if ($2==$1) { next }
        
        expe=(count1 * counts[$2]) /tot
        f=($3) / (expe+1)
        if (f>1) print $0, int(f) >"grams.rel"
     }
     END { print tot}
    '''
    # cat guts.srt  |uniq -c |gawk '{print $2,$3,$1}' >gutpairs.lst
 plot
  h1: guts
  pre
    xse:gawk in="guts.rel" : '''
     $1!=$2 { c=int($4/100);cc[c]=cc[c]+1}
     END { for (i in cc) print i,cc[i]}
    '''
  h1: grams
  pre  
    xse:gawk in="grams.rel" : '''
     $1!=$2 { c=int($4/100);cc[c]=cc[c]+1}
     END { for (i in cc) print i,cc[i]}
    '''
 sanaparitkarsi
    ### xse:gawk in="sanaparit2.all" : '''
     BEGIN {  while (getline<"kaavoitetut") { i++;sanat[$1]=1; }}
     { #if (NR>30000) exit; 
      s1=(sanat[$2]) 
      s2=(sanat[$1]) 
      if (s1!=1 || s2!=1) next
      print  >"gramkarsi.lst"
      luvut[$1]=luvut[$1]+$3 
     }
     #END { for (i in luvut) print i,luvut[i]>"grams.cnt"}
    '''
     # cat gramkarsi.lst |gawk '$1!=p1 {print p1,n>"gram.cnt";p1=$1;n=0} {n=n+$3;tot=tot+$3} '
     #cat sanaparit2.lst |gawk '$1!=p1 {print p1,n>"sanaparit2.cnt";p1=$1;n=0} {n=n+$3;tot=tot+$3} END { print tot}'  
 gutjoin    
    xse:gawk in="gutsents.iso" env="LC_ALL=C": '''
     BEGIN {  while (getline<"kaavoitetut") { i++;sanat[$1]=1; }}
     { 
      #if (NR>30000) exit; 
      if (length($0)<2)  {
        for (i in sent) {
          luvut[sent[i]]++ 
          for (j in sent)
            if (i!=j)        print  i,j  >"gutskarsi.sents"
        }  
        delete(sent);len=0
       }    
      if (sanat[$1]==1) { sent[$1]=1;len++; }
     }
     END { for (i in luvut) print i,luvut[i]>"guts.cnt"}
    '''
 zz  
    xse:gawk in="sanaparit2.all" : '''
     BEGIN {  while (getline<"kaavoitetut") { i++;sanat[$1]=1; }}
     { #if (NR>30000) exit; 
      s1=(sanat[$2]) 
      s2=(sanat[$1]) 
      if (s1!=1 || s2!=1) next
      print  >"gramkarsi.lst"
      luvut[$1]=luvut[$1]+$3 
     }
     END { for (i in luvut) print i,luvut[i]>"grams.cnt"}
    '''
 sanaparitjoin
    #xse:gawk in="sanaparit.all" : '''
    xse:gawk in="turha": '''
  
      {  gsub("_","",$0)
      if (p1!=$1) { print p1, nn> "sanaparit.cnt";nn=0}
       if (p1==$1 && p2==$2) np=np+$3  
      else { print p1,p2,np>"sanaparit2.all";np=0;}
      p1=$1;p2=$2;np=np+$3;nn=nn+$3
      }
    ''' 
 skumprev
   xse:gawk in="sanaparit.srt": '''
    /-/ { next}
    { if ($1==p1 && $2==p2) {  y=y+$3}
      else { 
      print p1,p2,y>"sanaparit12.lst";
      print p2,p1,y >"sanaparit21.lst"; 
      p1=$1;p2=$2;y=$3
      }
    }  
   '''
 skumpfreqs
  pre
   xse:gawk in="skumpkarsi.lst" : '''
    BEGIN { FS=",";}
    { n=0;
     for (i=3;i<NF;i=i+2) {
       n=n+$(i+1);ns[$i]=ns[$i]+$(i+1) 
     }
     print $1,$2,n, NF >"skumpfreq.lst";
     #if (NR>1000) exit
      }
    END { for (i in ns) print i,ns[i]>"skumpfreq2.lst"}  
   ''' 
 finnwn
   #cat ../finnwn/lists/fiwn-semrels-extra.tsv |gawk -F'\t' '{print $3}' |sort |uniq -c
   xse:gawk in="../finnwn/lists/fiwn-semrels-extra.tsv" : '''
    BEGIN { FS="\t";print "<ul>"}
     function list(st)    {    res=""; split(st,ss,"|"); 
      for (s in ss) {  
      gsub(/^[[:space:]]+|[[:space:]]+$/,"",ss[s]);
      if (match(ss[s],/[ -_><]/)<1)
       res=res "," ss[s];
            }
           return res
      }
     function short(st)    { 
        res=""; 
       split(st,ss," "); 
       return substr(ss[1],1,3) substr(ss[2],1,3) 
              }
    { res1=list($2);
     res2=list($5);  
     if (short($3)!="ATT") 
     print res1  res2 >"finwn.semrel"
     #if (NR>10) exit
      }
   ''' 
 synoall
   xse:shellexec: cat finwn.syno |gawk '{ print gensub(" [\|] ",",","g",$0)}' >finsyno.tmp

   xse:gawk env="LC_ALL=C" in="finsyno.tmp" : '''
        BEGIN { FS=",";while (getline<"kaavoitetut") { i++;sanat[$1]=1; }}
      { res=""
        hit=0
        for (i=1;i<=NF;i++) { 
          if (sanat[$i]==1) { #          if ($i!="") 
             res=res $i ","
             hit++ 
           }
      }
          if (hit>1)   print res >"finwn.syno2"
      }
    '''
                        #gsub(/^[[:space:]]+|[[:space:]]+$/,"",$i);
                        #if (NR<999) print $i i
            #if (match($i,/[ -_><]/)<1) {  
   #xse:shellexec: ./rallatin syno
 mis
  xmp
   xse:gawk in=wg2.cmd  out=wg3.cmd : '''
    #BEGIN { while (getline < "mis2.lst") { i++;s=substr($9,2,length($9)-6);mis[i]=s;};for (i in mis) print i,mis[i]; FS=" ";nmis=mis[i];i=1;} 
    BEGIN { while (getline < "mis2.lst") { i++;s=substr($9,2,length($9)-6);mis[i]=s;}; FS=" ";nmis=mis[1];i=1;print "XXX:",nmis} 
    {  if (NR==nmis) { print 
    i++; nmis=mis[i]   }
     }
   '''
   
 stypes
  xmp
   xse:gawk in=synsyn.htmi BEGIN="FS=',';ORS=''; OFS=','": '''
     /Synonyymit.fi::/ { 
       print "\n",sana ","> "synt_all.lst" 
       for (x in sanat) print "#"x,gensub("\r"," ","G",sanat[x])  >"synt_all.lst" #>"synt_" x ".lst";
       split($0,s," ");sana=tolower(s[3]);print sana "!!!!"
       delete(sanat)
       next
        }
     /Suomi Sanakirja/ { next} 
       // { 
       if (index($1,"  : !")==1) { typ=substr($1,6); $1=""} else $1=substr($1,6)
       sanat[typ]=sanat[typ]  $0
       
        }
       #print "*****[" $1"]***",$2;
       #/!first/ { o="first";$1=""; first=first $0}
       #/!sec/ { o="first";$1=""; sec=sec $0}
       #/!rel/ { o="rel";$1=""; rel=rel $0}
       #/!ant/ { o="ant";$1=""; ant=ant $0}
    #{  if (NR>100)  exit }
     
   '''
   
 ttt
   xse:from file="syno2/s55.html" xse:to=/test
     xse:copy
   xse:debug  
   # gawk ' NR>820 { print "wget --wait=1 https://www.synonyymit.fi/"$1" -O syno2/s" NR".html;sleep 1s"}' kaavoitetut.utf
 syno 
   xse:to file="synsyn.htmi"   
    li
     xse:apply xtimes=80 times=37090 counter=c
       xse:from file="syno2/s{$c}.html"
            xse:line: {$c} {head/title}::
            xse:debugtext xse:if="?eq(?mod($c,100),1)": {$c} 
            xse:apply select="#maindict/ul"
                  xse:line: !{@class},
                  xse:apply select=li 
                    xse:text: {@alltext()},
       :        
 aa   
     ###xmp
      xse:from file=turha.html xse:to=/turha
        xse:copy
     #xse:debug      
     ###xse:shellexec: cat kaavoitetut | iconv -f ISO-8859-1//TRANSLIT -t UTF-8 >kaavoitetut.utf
     #xse:gawk in=kaavoitetut.utf out=sanat.xml: ''' BEGIN { print "<ul>"} { print "<li>" $1 "</li>" }    END { print "<ul>"} '''
     ###xmp
       xse:from file="sanat.xml"
       ### #xse:to file="syno.cmd"
        ul 
         xse:apply maxtimes=2 select=li
           li: {?urlencode(.)} {.}
          #xse:line: wget --post-data=$(printf "url="; urlencode $u) https://www.synonyymit.fi/{$1}
 
     xse:from file="sanat.xml" 
      xse:apply select=li xmaxtimes=10
       xse:set sana={.}
       xse:to file="syno/{$sana}.xsi"
         xse:sleep time="{?random(2000,20000)}"         
        xse:from url="https://www.synonyymit.fi/{$sana}" 
          xse:copy         
 z        # xse:httpget url="https://www.synonyymit.fi/{$sana}" 
          #xse:to file="syno/{$sana}.xsi"
              ###d
               xse:apply select="//span"   
                  s: {@alltext()},{@class}
               xse:apply select="//ul"
                xse:element name={@class}
                 xse:apply select="li"
                  li: {@alltext()}  
     #xse:debug         https://www.synonyymit.fi/%C3%B6t%C3%B6kk%C3%A4
             
 x          li: {@.}_
 x    
    xse:apply select=".//ul"
     xse:copy 
  v   li: {@id}
      ul:  &nbsp: {@class}
        xse:apply select="li"
         li: xse:{@alltext()}
    

 sema
  # gawk -F, '{print $2,$8,$6}' klk.kokoko >../rallatin/sanaparit.lst
  # xse:shellexec: LC_ALL=C;sort sanaparit.lst >sanaparit.srt
  xmp
     xse:gawk in=sanaparit.srt: '''
     
       BEGIN { ORS=","}
       /\-/ { next}
       { if ($1!=prev1 ) {  print  prev2 "," np "\n===" tot "\n" $1  >"skumppanit.lst";prev1=$1;prev2=$2;np=0;tot=0 }
       else if ($2!=prev2 ) { print prev2 "," np>"skumppanit.lst"; prev2=$2;np=0}  
       np=np+$3
       tot=tot+$3
       #if (i>62000) exit;
       i++
       }
     '''

 adj
   # cat uuskaavas4.lst |gawk 'BEGIN {FS="," }{print $7 }' |./utfiin |./fiana|./ansiin |grep -a " A Pos Nom" >adj.ana
   pre
   xse:gawk in=adj.ana :  ''' BEGIN { FS="/"}
      /A Pos Nom Sg/ { s=substr($1,2);a=0;for (i=2;i<=NR;i++) if (index($i,"A Pos Nom Sg")>0 && index($i,s)>0) print s > "adj.all"}
      #/A Pos Nom Sg/ { a=0;for (i=2;i<=NR;i++) if (index($i,"A Pos Nom Sg")>0 && index($1) print substr($i,2) > "adj.all"}
      '''
   xse:shellexec: LC_ALL=C;sort adj.all >adj.srt
   xse:gawk in=uuskaavas4.lst :  ''' 
     BEGIN { while (getline s<"adj.srt")  adj[s]="A";      FS=",";print "*********************"       }
    {  print $0 "," adj[$7]>"uuskaavas5.lst"}
    ''' 
   xse:shellexec: LC_ALL=C;cat uuskaavas5.lst | gawk -F, '{ print $7 "," NR }' |sort >aakkos.lst
 promanual
   xse:from file="pron.html"
    ul
     xse:apply select="tr" xmaxtimes=25 xse:from="body/table/tbody"
       xse:if test="{?and(?ne(td[2]/b,'0 ilo'),?gt(td/@count(),2))}" 
        li xse:if="{?eq(td,'')}": {td}    
           #xse:if test="{?lt(?length(?trim(td[1])),2)}" 
           xse:apply select="td" counter="n=0"
            #em xseif="{?ne(*[1],'')}": {*[1]} {*[5]},
            ul 
              xse:if test="{?ne(.,'')}"
                li: <b>{.}  {*[3]}</b>
                 # xse:apply counter=n=0
                 #   em xse:if="{?ne(.,'')}": {@.}{$n}{.}, 
              xse:else
               li: <b>{b}:{*[5]}_</b>
               # xse:apply counter=n=0
               #   em xse:if="{?ne(.,'')}": {@.}{$n}{.}, 
 pronominit
   xse:shellexec: ./rallatin pronominit pronominit.tohfst
   #  xse:shellexec:  cat pronominit.tohfst |iconv -f ISO-8859-1//TRANSLIT -t UTF-8| ./figen| iconv -t ISO-8859-1//TRANSLIT -f UTF-8> pronominit.ana;cat pronominit.ana
   
 hae
  pre
    xse:shellexec: ./rallatin hae
 pron
  pre
    xse:shellexec: ./rallatin pronominit pronominit.tohfst
          #xse:shellexec:    cat prono.gen |iconv -t ISO-8859-1//TRANSLIT -f UTF-8| gawk -F'/' '{ for (i=2;i<=NR;i++) if (index($i,"Pron")>0) print $i>"pron.noms"}'
          #xse:shellexec:    cat prono.gen |iconv -t ISO-8859-1//TRANSLIT -f UTF-8| gawk -F'/' '{ for (i=2;i<=NR;i++) if (index($i,"Pron")>0) print $i}'
          #xse:shellexec:    cat prono.gen |iconv -t ISO-8859-1//TRANSLIT -f UTF-8
 aaa
  pre
   ###xse:gawk in=pron.ana BEGIN="FS='/'": '''
    {  for (p=2;p<=NR;p++)  if (index($p,"Pron")>0 && index($p,"Foc_")<1 && index($p," Px")<1) { # && index($p,"Qnt")>0  && index($p,"Indef")<1  ) 
      print $1 "," $p > "pron.tmp"
      #=split($p,ss," "); print s #for (i=2;i++;i<=4) print ss[i] 
     } 
   } 
  
   '''
  pre
      xse:gawk  env="LC_ALL=fi_FI.ISO-8859-1" in="pron.tmp" BEGIN="FS=' '": '''
       {
         #if (NR>100) exit  
         #$1="";$2=""
         sraja=index($1,",")
         lemma=substr($1,sraja+1,99)
         muoto=substr($1,2,sraja-2)
          gsub(/\$/,"",$0);
          r=""
          for (p=2;p<=NF;p++)  if (index(" Rel Dem Qnt Indef Refl Pron Pers Interr A ",$p)<1) r=r $p 
          #tokat[$3]=$p
            #print  $0 
          kaikki[r]=r
          print lemma "X" r "X" muoto > "pron2.tmp"   
          
        } 
      END {  #for (i in tokat) print i,tokat[i]
      for (i in kaikki) print i
      } 
     
     '''
    xse:shellexec: cat prons2.tmp |sort |uniq > pron3.tmp
    xse:gawk  env="LC_ALL=fi_FI.ISO-8859-1" in="pron3.tmp" BEGIN="FS='X'": '''
     {  if (f2==$2 && f1==$1) print $1 " " $2 " " f3 " " $3
      f1=$1;f2=$2;f3=$3
     } 
    '''

    
